
fun count_chars([], c, n) = n
  | count_chars(x::xs, c, n) =
      if x = c then count_chars(xs, c, n + 1)
      else n;

fun encode [] = []
  | encode (x::[]) = [(1, x)] (* Handle empty list *)
  | encode(x::xs) =
      let
        val count = count_chars(x::xs, x, 0) (* Count how many times the character occurs consecutively *)
        val remaining = List.drop(xs, count - 1) (* Drop those elements from the list *)
      in
        (count, x) :: encode remaining (* Append the new tuple to the return list *)
    end;

fun decode [] = []
  | decode ((count, x)::[]) = List.tabulate(count, fn _ => x) (* Use tabulate funtion to fill count places in a list with x *)
  | decode ((count, x)::xs) = List.tabulate(count, fn _ => x) @ decode xs; (* Decode first element, then decode the rest *)

encode [1, 1, 2, 1, 1, 3, 3, 3];
